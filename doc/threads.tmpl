            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Huizhe Su <suhzh@shanghaitech.edu.cn>
Cheng Peng <pengcheng2.shanghaitech.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Add a list to store the sleep threas and its lock to synchronize.
```c
/* List of sleep threads and its lock*/
static struct list sleep_list;
static struct lock timer_sleep_lock;
```

Add to `struct thread` in `threads/thread.h`
```c
struct thread
{
  /* Owned by timer.c */
  struct list_elem sleepelem; /* List element for sleep thread queue*/
  int64_t sleep_to;           /* sleep until `sleep_tp` ticks */
```

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
When calling `timer_sleep()`, we first calculate until when (in ticks) the thread needs to sleep. Then we insert the thread into `sleep_list` and block the thread. 
The timer interrupt handler will check the `sleep_list` to find the threads need to be awaken. It will unblock those threads and remove them from the list.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
First, when inserting thread into `sleep_list`, we ensure that the threads in the list are sorted in ascending order by their `sleep_to` fields. 
Then the timer interrupt only need to check the first few threads until it found the first thread which still needs sleeo. This only costs constant time.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
We use `timer_sleep_lock` to lock the `sleep_list` when a thread trying to access `sleep_list` in `timer_sleep()`, and release the lock after all the operation with the list are done. They will access the list one by one and there is no any race conditions.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
When a thread acquires the `timer_sleep_lock`, it will disable interrupt immediately and will not allow interrupt until the sleep thread is blocked. There might be a tricky condition that a timer interrupt occurs right after the it acquiring the lock. However, since the interrupt will not allow any other interrupt (in PintOS), there is no worry about race condition.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

First, I consider to use another thread to monitor all the sleep thread. Each time this thread runs, it will wake up all the other threads which should not be sleeping any more. However, this approach needs to initialize a thread immediately after the os was booted. This may be inefficient. In logic, letting timer owns a standalone thread to monitor other thread is not reasonable. What's more, it is uncertain when the monitor thread will be run, so the sleep time for each thread may be inaccurate.

Next, I try to make use of `timer_interrupt ()`. I came up with three designs, but only differ in their data strucure. 

- My current design.
- My current design, but use a priority queue instead of a list to store all the sleep threads.
- My current design, but not use a seperate list. Each time go through all threads to check if the threads need to be awaken.

In theory, the second design may be faster than my current design, but the implementation is too complicated. I also notice that in practice, there will not be too many threads sleeping at the same time. Even if my design requires $O(n)$ when inserting and the second design only requires $O(\log n)$, the gap is negligible.
The third design is too inefficient.

Therefore, I choose the current design because its simple to implement and is also efficient.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
